/// SPDX-License-Identifier: Apache-2.0
pragma solidity 0.8.19;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {IMultiTxProcessor} from "../interfaces/IMultiTxProcessor.sol";

/// @title MultiTxProcessor
/// @author Zeropoint Labs.
/// @dev handles all destination chain swaps.
/// @notice all write functions can only be accessed by superform keepers.
contract MultiTxProcessor is AccessControl, IMultiTxProcessor {
    /*///////////////////////////////////////////////////////////////
                    Access Control Role Constants
    //////////////////////////////////////////////////////////////*/
    bytes32 public constant SWAPPER_ROLE = keccak256("SWAPPER_ROLE");

    /*///////////////////////////////////////////////////////////////
                    State Variables
    //////////////////////////////////////////////////////////////*/
    /// @dev maps all the bridges to their address.
    /// @notice bridge id is mapped to its execution address.
    mapping(uint8 => address) public bridgeAddress;

    constructor() {
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
    }

    /*///////////////////////////////////////////////////////////////
                            External Functions
    //////////////////////////////////////////////////////////////*/
    /// @notice receive enables processing native token transfers into the smart contract.
    /// @dev socket.tech fails without a native receive function.
    receive() external payable {}

    function setBridgeAddress(
        uint8[] memory bridgeId_,
        address[] memory bridgeAddress_
    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {
        for (uint256 i = 0; i < bridgeId_.length; i++) {
            address x = bridgeAddress_[i];
            uint8 y = bridgeId_[i];
            require(x != address(0), "Router: Zero Bridge Address");

            bridgeAddress[y] = x;
            emit SetBridgeAddress(y, x);
        }
    }

    /// @dev PREVILAGED SWAPPER ONLY FUNCTION
    /// @dev would interact with socket contract to process multi-tx transactions and move the funds into destination contract.
    /// @param bridgeId_          represents the unique propreitory id of the bridge used.
    /// @param txData_            represents the transaction data generated by socket API.
    /// @param approvalToken_     represents the tokens to be swapped.
    /// @param allowanceTarget_   represents the socket registry contract.
    /// @param amount_            represents the amounts to be swapped.
    function processTx(
        uint8 bridgeId_,
        bytes memory txData_,
        address approvalToken_,
        address allowanceTarget_,
        uint256 amount_
    ) external override onlyRole(SWAPPER_ROLE) {
        address to = bridgeAddress[bridgeId_];
        if (allowanceTarget_ != address(0)) {
            IERC20(approvalToken_).approve(allowanceTarget_, amount_);
            (bool success, ) = payable(to).call(txData_);
            require(success, "Socket Error: Invalid Tx data (1)");
        } else {
            (bool success, ) = payable(to).call{value: amount_}(txData_);
            require(success, "Socket Error: Invalid Tx Data (2)");
        }
    }

    /*///////////////////////////////////////////////////////////////
                            Developmental Functions
    //////////////////////////////////////////////////////////////*/
    /// @dev PREVILAGED admin ONLY FUNCTION.
    /// @notice should be removed after end-to-end testing.
    /// @dev allows admin to withdraw lost tokens in the smart contract.
    function withdrawToken(address _tokenContract, uint256 _amount)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        IERC20 tokenContract = IERC20(_tokenContract);

        /// note: transfer the token from address of this contract
        /// note: to address of the user (executing the withdrawToken() function)
        tokenContract.transfer(msg.sender, _amount);
    }

    /// @dev PREVILAGED admin ONLY FUNCTION.
    /// @dev allows admin to withdraw lost native tokens in the smart contract.
    function withdrawNativeToken(uint256 _amount)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        payable(msg.sender).transfer(_amount);
    }
}
